Ex 1(1)
a=int(input("Enter the first input:"))
b=int(input("Enter the Second input:"))
sum_ab=a+b
difference=a-b
product_ab=a*b
print("sum=",sum_ab)
print("difference=",difference)
print("product=",product_ab)
OUTPUT
Enter the first input:10
Enter the Second input:5
sum= 15
difference= 5
product= 50
---------------------------------------------------------------------------
EX 1(2)
a=int(input("Enter the first input:"))
b=int(input("Enter the Second input:"))
quotient=a/b
remainder=a%b
floor_division=a//b
print("floor_division=",floor_division)
print("REMAINDER=",remainder)
print("QUOTIENT=",quotient)
OUTPUT
Enter the first input:50
Enter the Second input:5
floor_division= 10
REMAINDER= 0
QUOTIENT= 10.0
----------------------------------------------------------------------------
EX 1(3)
a=int(input("Enter the first input:"))
b=int(input("Enter the Second input:"))
max=max(a,b)
min=min(a,b)
power=a**b
print("max=",max)
print("min=",min)
print("power=",power)
OUTPUT
Enter the first input:10
Enter the Second input:5
max= 10
min= 5
power= 100000
---------------------------------------------------------------------------------
EX 1(4)
b=float(input("Enter the BASE:"))
h=float(input("Enter the HEIGHT:"))
area=0.5*b*h
print("Area of triangle",area)
OUTPUT
Enter the BASE:10
Enter the HEIGHT:8
Area of triangle 40.0
--------------------------------------------------------------------------------
EX 1(5)
r=float(input("Enter the radius:"))
area=2*3.14*r
print("Area of circumference",area)
OP
Enter the radius:5
Area of circumference 31.400000000000002
----------------------------------------------------------------------------
EX 1(6)
r=float(input("Enter the radius:"))
area=3.14*r**2
print("Area of circle",area)
OUTPUT
Enter the radius:5
Area of circle 78.5
-----------------------------------------------------------------------------
EX 1(7)
a=float(input("Enter the A value:"))
b=float(input("Enter the B value:"))
c=float(input("Enter the C value:"))
area=a+b+c
print("circumference",area)
OUTPUT
Enter the A value:5
Enter the B value:6
Enter the C value:7
circumference 18.0
------------------------------------------------------------------------------
EX 1(8)
import math
a=float(input("Enter the A value:"))
area=pow(a,2)
print("circumference",area)
OUTPUT
Enter the A value:7
circumference 49.0
------------------------------------------------------------------------------
EX 1(9)
import math
print("Enter the mark of 5 subjects")
m1=int(input("enter the mark 1="))
m2=int(input("enter the mark 2="))
m3=int(input("enter the mark 3="))
m4=int(input("enter the mark 4="))
m5=int(input("enter the mark 5="))
total=m1+m2+m3+m4+m5
avg=total/5
percent=(total/500)*100
print("Total mark of 5 subjects",total)
print("Avg mark of 5 subjects",avg)
print("Total  percent of 5 subjects",percent)
OUTPUT
Enter the mark of 5 subjects
enter the mark 1=76
enter the mark 2=86
enter the mark 3=68
enter the mark 4=86
enter the mark 5=79
Total mark of 5 subjects 395
Avg mark of 5 subjects 79.0
Total  percent of 5 subjects 79.0
--------------------------------------------------------------------------
EX 1(10)
import math
print("Enter the 8 weights")
m1=int(input("enter the weight 1="))
m2=int(input("enter the weight 2="))
m3=int(input("enter the weight 3="))
m4=int(input("enter the weight 4="))
m5=int(input("enter the weight 5="))
m6=int(input("enter the weight 6="))
m7=int(input("enter the weight 7="))
m8=int(input("enter the weight 8="))
total=m1+m2+m3+m4+m5+m6+m7+m8
avg=total/8
max=max(m1,m2,m3,m4,m5,m6,m7,m8)
min=min(m1,m2,m3,m4,m5,m6,m7,m8)
print("Total weight=",total,"KG")
print("Avg weight=",avg,"KG")
print("max weight=",max,"KG")
print("mIN weight=",min,"KG")
OUTPUT
Enter the 8 weights
enter the weight 1=75
enter the weight 2=86
enter the weight 3=68
enter the weight 4=56
enter the weight 5=97
enter the weight 5=65
enter the weight 5=64
enter the weight 5=86
Total weight 597
Avg weight 74.625
max weight 97
max weight 56
------------------------------------------------------------------
2(1)
def count_words(input_string):
    words = input_string.split()
    word_count = len(words)
    return word_count
input_string = input("Enter a string: ")
print("Number of words:", count_words(input_string))
OUTPUT
Enter a string: nanba en arumai nanbah
Number of words: 4
-----------------------------------------------------------------
2(2)
def find_longest_word(input_string):
    words=input_string.split()
    longest_word=max(words,key=len)
    return longest_word

input_string=input("Enter a string:")
longest_word=find_longest_word(input_string)
print("The longest word is:",longest_word)
OUTPUT
Enter a string:vanakam da mapla
The longest word is: vanakam
----------------------------------------------------------------
2(3)
def count_vowels(input_string):
    vowels="aeiouAEIOU"
    vowel_count=0

    for char in input_string:
        if char in vowels:
            vowel_count+=1

    return vowel_count

input_string=input("Enter a string:")
vowel_count=count_vowels(input_string)
print("Number of vowels:",vowel_count)
OUTPUT
Enter a string:hlo sir i am fine
Number of vowels: 6
---------------------------------------------------------------
2(4)
def replace_space_with_hyphens(input_string):
    result_string=input_string.replace(" ","-")
    return result_string

input_string=input("Enter a string:")
result_string=replace_space_with_hyphens(input_string)
print("String with spaces replaced by hyphens:",result_string)
OUTPUT
Enter a string:hlo world
String with spaces replaced by hyphens: hlo-world
---------------------------------------------------------------
2(5)
def case(input_string,n):
    if(n==1):
        result=input_string.upper()
        return result
    elif(n==2):
        result=input_string.lower()
        return result
    else:
        print("Enter correct option")

input_string=input("Enter the string:")
n=int(input("1. for upper \n2. for lower case\nEnter option:"))
print(case(input_string,n))
------------------------------------------------------------------
2(6)
def is_palindrome(input_string):
    
    cleaned_string = ''.join(char.lower() for char in input_string if char.isalnum())

  
    if cleaned_string == cleaned_string[::-1]:
        print("The string is a palindrome")
    else:
        print("The string is not a palindrome")

input_string = input("Enter a string: ")
is_palindrome(input_string)
OUTPUT
Enter a string: malayalam
The string is a palindrome
--------------------------------------------------------------------
2(8)
def concatenate_with_separator(string_list,separator):
    result_string=separator.join(string_list)
    return result_string

string_list=["Hello","world","this","is","a","test"]
separator=","
result_string=concatenate_with_separator(string_list,separator)
print("Concatenated string:",result_string)
OUTPUT
Concatenated string: Hello,world,this,is,a,test
--------------------------------------------------------------
2(9)
def delete_character(input_string, char_to_remove):
    # Remove all occurrences of char_to_remove from input_string
    result_string = input_string.replace(char_to_remove, "")
    return result_string

# Example usage
input_string = input("Enter the string: ")
char_to_remove = input("Enter the character to remove: ")

# Ensure that char_to_remove is a single character
if len(char_to_remove) != 1:
    print("Please enter exactly one character to remove.")
else:
    result_string = delete_character(input_string, char_to_remove)
    print("String after removal:",result_string)
output
Enter the string: hi bro
Enter the character to remove: h
String after removal: i bro
-----------------------------------------------------------------
3(1)
my_tuple=(10,20,30,40,50)
element =3
if element in my_tuple:
    print(f"{element} exists")
else:    
    print(f"{element} not exists")
output
30 exists
----------------------------------------------------------------
3(2)
my_list=[10,20,30,40,50]
my_tuple=tuple(my_list)
length=len(my_tuple)
print("Converted Tuple",my_tuple)
print("length of Tuple",length)
OUTPUT

Converted Tuple (10, 20, 30, 40, 50)
length of Tuple 5
 ----------------------------------------------------------------
3(3)
my_list=[10,20,30,40,50]
index=2
element=25
my_list.insert(index,element)
print("List after Insertion",my_list)
to_remove=3
removed =my_list.pop(to_remove)
print("Removed element",removed)
print("List after removal",my_list)
OUTPUT
List after Insertion [10, 20, 25, 30, 40, 50]
Removed element 30
List after removal [10, 20, 25, 40, 50]
----------------------------------------------------------------
3(4)
my_list=[10,65,20,80,40,32,50]
ascending=sorted(my_list)
descending=sorted(my_list,reverse=True)
print("my_list",my_list)
print("ascending",ascending)
print("descending",descending)
OUTPUT
my_list [10, 65, 20, 80, 40, 32, 50]
ascending [10, 20, 32, 40, 50, 65, 80]
descending [80, 65, 50, 40, 32, 20, 10]
--------------------------------------------------------------
3(5)
my_list=[10,65,20,80,40,32,50]
print("Before Interchanging",my_list)  
if len(my_list)>=2:
    my_list[0],my_list[-1]=my_list[-1],my_list[0]
    print("After Interchanging",my_list)   
OUTPUT
Before Interchanging [10, 65, 20, 80, 40, 32, 50]
After Interchanging [50, 65, 20, 80, 40, 32, 10]
-------------------------------------------------------------
3(6)
set1={1,2,3,4,5}
set2={4,5,6,7,8}
union=set1.union(set2)
intersection=set1.intersection(set2)
print("union",union)
print("intersection",intersection)
OUTPUT
union {1, 2, 3, 4, 5, 6, 7, 8}
intersection {4, 5}
----------------------------------------------------------
3(7)
set1={1,2,3,4,5}
set2={4,5,6,7,8}
subset=set1.issubset(set2)
superset=set2.issuperset(set1)
print("set 1:",set1)
print("set 2:",set2)
print("subset:",subset)
print("superset:",superset)
OUTPUT
set 1: {1, 2, 3, 4, 5}
set 2: {4, 5, 6, 7, 8}
subset: False
superset: False
----------------------------------------------------------
3(8)
tuples_list=[('a',1),('b',2),('c',3)]
dict=dict(tuples_list)
print("Dictionary:",dict)
OUTPUT
Dictionary: {'a': 1, 'b': 2, 'c': 3}
--------------------------------------------------------
4(1)
import pandas as pd
name = ["ram","rahul","akash","arun","ron"]
score=[15,13,16,12,17]
attempts=[2,1,2,3,1]
qualify=['yes','no','yes','no','yes']
data ={
       'Name':name,
       'Score':score,
       'Attempts':attempts,
       'Qualify':qualify
       }
df = pd.DataFrame(data)
print("Data Frame:")
print(df)
---------------------------------------------------------
4(2)
import pandas as pd
df1 = pd.DataFrame({
'ID':[1,2,3,4,5],
'name':["rock","bruce","thor","tony","starc"],
'mark':[18,22,44,11,33]
})
df2 = pd.DataFrame({
'ID':[1,2,3,4,5],
'mark':[10,23,45,32,50]
})
outer_join=pd.merge(df1,df2,on='ID',how='outer')
print("outer result")
print(outer_join)
print("\n")
--------------------------------------------------------
4(3)
import pandas as pd
sales = pd.DataFrame({
'Region':['east','west','north','south'],
'Sales':[2000,5000,8000,10000]
})
regions = pd.DataFrame({
'Region':['east','west','north','south'],
'Manager':['Alice','Bob','Stark','Rohith']
})
regions.set_index('Region',inplace=True)
result=sales.join(regions,on='Region')
print(result)
----------------------------------------------------------
4(4)
import pandas as pd
data1={
       'name':['ron','hermoini','harry','snape','dubledoor'],
       'age':[15,15,16,31,50]
       }
df1=pd.DataFrame(data1)
data2={
       'name':['virat','rohith','dhawan','dhoni','hardik'],
       'age':[36,38,45,44,29]
       }
df2=pd.DataFrame(data2)
concatenated_df=pd.concat([df1,df2],axis=0)
print("concatenated_df:")
print(concatenated_df)
concatenated_df1=pd.concat([df1,df2],axis=1)
print("Horizontal concatenated_df 1:")
print(concatenated_df1)
--------------------------------------------------------------
5(1)
import numpy as np
arr=np.arange(1,11)
sum=np.sum(arr)
print("Sum=",sum)
product=np.prod(arr)
print("Product=",product)
min=np.min(arr)
print("Min=",min)
max=np.max(arr)
print("Max=",max)
mean=np.mean(arr)
print("mean=",mean)
median=np.median(arr)
print("median=",median)
variance=np.var(arr)
print("Variance=",variance)
std=np.std(arr)
print("std=",std)
-------------------------------------------------------------
5(2)
import numpy as np
arr=np.arange(1,13)
print(" 1 D Array=",arr)
reshape2 = arr.reshape(3,4)
print("Reshaped 2D Array",reshape2)
reshape3 = arr.reshape(2,3,2)
print("Reshaped 3D Array",reshape3)
flatten =reshape3.flatten()
print("Flatten=",flatten)
-----------------------------------------------------------
5(3)
import numpy as np
matrix1 =np.array([[1,2],[3,4]])
matrix2 =np.array([[5,6],[7,8]])
add=matrix1+matrix2
sub=matrix1-matrix2
mul=matrix1*matrix2
prod=np.dot(matrix1,matrix2)
transpose=np.transpose(matrix1)
det=np.linalg.det(matrix1)
print("Sum=",add)
print("sub=",sub)
print("mul=",mul)
print("prod=",prod)
print("transpose=",transpose)
print("determinant=",det)
inv=np.linalg.inv(matrix1)
print("Inverse=",inv)
------------------------------------------------------------
5(4)
import numpy as np
arr2d=np.array([[1,2,3],[4,5,6],[7,8,9]])
arr1d=np.array([1,2,3])
result=arr2d+arr1d
print("Add:",result)
scalar=5
arr2d=np.array([[1,2],[3,4],[5,6]])
resultp=scalar*arr2d
print("Product:",resultp)
arr3d=np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])
arr1d=np.array([10,20,30])
resultt=arr3d+arr1d
print("Sum:",resultt)
----------------------------------------------------------
5(5)
import numpy as np
arr=np.array([1,2,3,4,5])
exp=np.exp(arr)
print("Exp:",exp)
arr=np.array([1,2.718,7,354,23.455,4.455])
log=np.log(arr)
print("Log:",log)
arr=np.array([1,10,100,1000,10000])
log10=np.log10(arr)
print("Log 10:",log10)
-------------------------------------------------------
5(6)
import numpy as np
angles=np.array([0,np.pi/6,np.pi/4,np.pi/3,np.pi/2])
sin=np.sin(angles)
print("SIN:",sin)
angles=np.array([0,np.pi/6,np.pi/4,np.pi/3,np.pi/2])
cosine=np.cos(angles)
print("COS:",cosine)
angles=np.array([0,np.pi/6,np.pi/4,np.pi/3,np.pi/2])
tangent=np.tan(angles)
print("TAN:",tangent)
values=np.array([0,0.5,1])
arcsin=np.arcsin(values)
print("Arcsin:",arcsin)
arctan=np.arctan(values)
print("Arctan:",arctan)
----------------------------------------------------------
5(7)
import numpy as np
angles=np.array([0,np.pi/6,np.pi/4,np.pi/3,np.pi/2])
sinh=np.sinh(angles)
print("SINh:",sinh)
angles=np.array([0,np.pi/6,np.pi/4,np.pi/3,np.pi/2])
cosine=np.cosh(angles)
print("COSh:",cosine)
angles=np.array([0,np.pi/6,np.pi/4,np.pi/3,np.pi/2])
tangent=np.tanh(angles)
print("TANh:",tangent)
values=np.array([0,0.5,1])
arcsinh=np.arcsinh(values)
print("Arcsinh:",arcsinh)
arctanh=np.arctanh(values)
print("Arctanh:",arctanh)
-------------------------------------------------------
5(8)
import numpy as np
a=np.array([[2,1],[1,3]])
b=np.array([4,5])
x=np.linalg.solve(a,b)
print("Linear soln",x)
--------------------------------------------------
7(1)
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

X=np.random.rand(100,2)
kmeans=KMeans(n_clusters=3)
kmeans.fit(X)
y_kmeans=kmeans.predict(X)
plt.scatter(X[:,0],X[:,1],c=y_kmeans,cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=200,c='red')
plt.show()
---------------------------------------------------------------------------------------
7(2)
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

np.random.seed(42)
X=np.random.rand(100,2)
kmeans=KMeans(n_clusters=3,random_state=42)
kmeans.fit(X)
labels=kmeans.labels_
centroids=kmeans.cluster_centers_
plt.figure(figsize=(8,6))
plt.scatter(X[:,0],X[:,1],c=labels,cmap='viridis',marker='o',label='Data Points')
plt.scatter(centroids[:,0],centroids[:,1],s=200,c='red',marker='x',label='Centroids')
plt.title('K-Means clustering')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend()
plt.show()
------------------------------------------------------------------------------
7(3)
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans

X,y=make_blobs(n_samples=300,centers=3,cluster_std=1.0,random_state=42)
kmeans=KMeans(n_clusters=3,random_state=42)
kmeans.fit(X)
labels=kmeans.labels_
centroids=kmeans.cluster_centers_
plt.figure(figsize=(8,6))
plt.scatter(X[:,0],X[:,1],c=labels,cmap='viridis',marker='o',s=50,label='Data Points')
plt.scatter(centroids[:,0],centroids[:,1],s=200,c='red',marker='x',label='Centroids')
plt.title('K-Means clustering')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend()
plt.show()
-----------------------------------------------------------------------------------
7(4)
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans

n_samples=300
X=np.random.rand(n_samples,2)
kmeans=KMeans(n_clusters=3,random_state=42)
kmeans.fit(X)
labels=kmeans.labels_
centroids=kmeans.cluster_centers_
plt.figure(figsize=(10,6))
plt.scatter(X[:,0],X[:,1],c=labels,cmap='viridis',marker='o',s=50,label='Data Points')
plt.scatter(centroids[:,0],centroids[:,1],s=200,c='red',marker='x',label='Centroids')
plt.title('K-Means clustering')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend()
plt.show()
----------------------------------------------------------------------------------
8(1)
import matplotlib.pyplot as plt
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
sales_product_A = [150, 200, 250, 300, 280, 320, 400, 380, 420, 450, 500,280]
sales_product_B = [180, 220, 240, 280, 300, 300, 420, 400, 440, 470, 520,390]
plt.figure(figsize=(10, 6))
plt.plot(months, sales_product_A, marker='o', linestyle='-', color='blue', label='Product A')
plt.plot(months, sales_product_B, marker='s', linestyle='--', color='green', label='Product B')
plt.title('Monthly Sales Comparison')
plt.xlabel('Months')
plt.ylabel('Sales')
plt.legend()
plt.grid(True)
plt.show()
--------------------------------------------------------------------------------------
8(2)
import matplotlib.pyplot as plt
import numpy as np
countries = ['USA', 'India', 'China', 'Brazil', 'Nigeria', 'Russia', 'Japan']
populations = [331, 1380, 1441, 213, 206, 146, 126]
colors = plt.cm.viridis(np.linspace(0, 1, len(countries)))
plt.figure(figsize=(10, 6))
plt.bar(countries, populations, color=colors)
plt.title('Population of Different Countries', fontsize=16)
plt.xlabel('Countries', fontsize=12)
plt.ylabel('Population (in millions)', fontsize=12)
plt.show()
-------------------------------------------------------------------------------------
